package com.example.strings;

//–≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –∏ –∑–∞–º–µ–Ω—É HTML-—Ç–µ–≥–æ–≤ –∏ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ —Ñ–∞–π–ª–µ gettys.html.
//BufferedReader ‚Äî —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –ø–æ—Å—Ç—Ä–æ—á–Ω–æ.
//FileReader ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è.
//FileNotFoundException ‚Äî –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.
//IOException ‚Äî –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.
//Pattern –∏ Matcher ‚Äî –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏.

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SearchReplace {

    private String fileName = "gettys.html";

    public static void main(String[] args) {
        SearchReplace sr = new SearchReplace();
        sr.run();
    }

    public void run() {
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String targetTag = "p";       // –ö–∞–∫–æ–π —Ç–µ–≥ –∏—â–µ–º
            String replaceTag = "span";   // –ù–∞ –∫–∞–∫–æ–π –∑–∞–º–µ–Ω—è–µ–º
            String attribute = "class";   // –ö–∞–∫–æ–π –∞—Ç—Ä–∏–±—É—Ç –¥–æ–±–∞–≤–ª—è–µ–º/–∏–∑–º–µ–Ω—è–µ–º
            String value = "sentence";    // –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞

            String line = "";
            int c = 1;

            //–ü—Ä–æ–≥—Ä–∞–º–º–∞ –º–µ–Ω—è–µ—Ç –≤—Å–µ —Ç–µ–≥–∏ <p> –Ω–∞ <span>, –¥–æ–±–∞–≤–ª—è—è class="sentence".
            //–≠—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∏—â–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤–∏–¥–∞:
            //<p>Some text</p>
            //–∏ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –∏—Ö –Ω–∞ —Ç—Ä–∏ –≥—Ä—É–ø–ø—ã:
            //m.group(1) ‚Üí –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ <p>
            //m.group(2) ‚Üí –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏ "Some text"
            //m.group(3) ‚Üí –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ </p>
            Pattern pattern1 = Pattern.compile("(<" + targetTag + ".*?>)(.*?)(</" + targetTag + ".*?>)");

            //–ü—Ä–æ–≥—Ä–∞–º–º–∞ —á–∏—Ç–∞–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –∏ –∏—â–µ—Ç –≤ –Ω–µ–π <p>...</p>.
            while ((line = reader.readLine()) != null) {
                Matcher m = pattern1.matcher(line);
                if (m.find()) {
                    //–ú–µ–Ω—è–µ—Ç <p> –Ω–∞ <span> –∏ </p> –Ω–∞ </span>.
                    String newStart = replaceTag(m.group(1), targetTag, replaceTag);
                    newStart = replaceAttribute(newStart, attribute, value);//üìå –ï—Å–ª–∏ —Ç–µ–≥ —É–∂–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç class, –æ–Ω –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è.
                    String newEnd = replaceTag(m.group(3), targetTag, replaceTag);

                    //–í—ã–≤–æ–¥–∏—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–º–µ–Ω—ë–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏.
                    String newLine = newStart + m.group(2) + newEnd;
                    System.out.printf("%3d %s\n", c, newLine);
                }
                c++;
            }

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    //üìå –ù–∞—Ö–æ–¥–∏—Ç –∏ –∑–∞–º–µ–Ω—è–µ—Ç <p> –Ω–∞ <span>.
    public String replaceTag(String tag, String targetTag, String replaceTag) {
        Pattern p = Pattern.compile(targetTag);  // targetTag is regex
        Matcher m = p.matcher(tag);  // tag is text to replace
        if (m.find()) {
            return m.replaceFirst(replaceTag); // swap target with replace
        }
        return targetTag;
    }

    //–ï—Å–ª–∏ —É —Ç–µ–≥–∞ —É–∂–µ –µ—Å—Ç—å class="...", –º–µ–Ω—è–µ—Ç –µ–≥–æ –Ω–∞ class="sentence".
    //üìå –ï—Å–ª–∏ –Ω–µ—Ç class, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.
    public String replaceAttribute(String tag, String attribute, String value) {
        Pattern p = Pattern.compile(attribute + "=" + "\".*?\"");  // targetTag is regex
        Matcher m = p.matcher(tag);  // tag is text to replace
        if (m.find()) {
            return m.replaceFirst(attribute + "=" + "\"" + value + "\"");
        }
        return tag;
    }
}
